tf.set_random_seed(0)
# 다시 실행해도 동일한 값을 얻기 위해 랜덤시드를 특정한 값으로 초기화 시킨다

x_date=[1.,2.,3.,4.]
y_data=[1.,3.,5.,7.]

W=tf.Variable(tf.ramdom_norma([1],-100.,100.))
# 정규분포를 따르는 랜덤넘버 1 (모양)

for step in range(300):
    # Gradient descent 300회 수행
    
    hypothesis=X*W
    # 가설함수 H(x)=Wx+b
    
    cost=tf.reduce_mean(tf.square(hypothesis-y_data))
    # tf.reduce_mean() : 평균
    # tf.square() : 제곱
    # cost는 에러(가설과 실제 데이터의 차이) 제곱의 평균
    
    alpa=0.01
    gradient=tf.reduce_mean(tf.multiply(W,X)-Y,X))
    descent=W-tf.multiply(alpha,gradient)
    W.assign(descent)
    # Gradient descent
    
    if step%10==0:
        print('{:5}|{:10.4f}|{:10.6f}'.format(step,cost.numpy(),W.numpy()[0]))
        # cost와 W가 어떻게 바뀌는지 10번마다 출력
